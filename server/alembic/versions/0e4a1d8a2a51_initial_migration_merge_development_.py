"""Initial migration: Merge development revisions

Revision ID: 0e4a1d8a2a51
Revises: 
Create Date: 2022-06-07 21:34:47.378484

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "0e4a1d8a2a51"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "providers",
        sa.Column("id", sa.Integer(), nullable=False, autoincrement=True),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("issuer", sa.String(), nullable=False),
        sa.Column("clientid", sa.String(), nullable=False),
        sa.Column("secret", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_index(op.f("ix_providers_id"), "providers", ["id"], unique=False)
    op.create_table(
        "users",
        sa.Column("id", sa.Integer(), nullable=False, autoincrement=True),
        sa.Column("iss", sa.String(), nullable=False),
        sa.Column("sub", sa.String(), nullable=False),
        sa.Column("created", sa.DateTime(), nullable=False),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column("role", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("iss", "sub", name="login_id"),
    )
    op.create_index(op.f("ix_users_id"), "users", ["id"], unique=False)
    op.create_index(op.f("ix_users_iss"), "users", ["iss"], unique=False)
    op.create_index(op.f("ix_users_sub"), "users", ["sub"], unique=False)
    op.create_table(
        "vectors",
        sa.Column("id", sa.Integer(), nullable=False, autoincrement=True),
        sa.Column("location", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("bacterial_strain", sa.String(), nullable=False),
        sa.Column("responsible", sa.String(), nullable=False),
        sa.Column("group", sa.String(), nullable=False),
        sa.Column("bsa1_overhang", sa.String(), nullable=True),
        sa.Column("selection", sa.String(), nullable=True),
        sa.Column("cloning_technique", sa.String(), nullable=True),
        sa.Column("is_BsmB1_free", sa.String(), nullable=True),
        sa.Column("notes", sa.String(), nullable=True),
        sa.Column("REase_digest", sa.String(), nullable=True),
        sa.Column("sequence", sa.String(), nullable=False),
        sa.Column("genbank", sa.String(), nullable=True),
        sa.Column(
            "level",
            sa.Enum("BACKBONE", "LEVEL0", "LEVEL1", name="vectorlevel"),
            nullable=False,
        ),
        sa.Column("bsmb1_overhang", sa.String(), nullable=True),
        sa.Column("gateway_site", sa.String(), nullable=True),
        sa.Column("experiment", sa.String(), nullable=True),
        sa.Column("date", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("level", "location", name="lvl_loc"),
        sa.UniqueConstraint("name"),
    )
    op.create_index(op.f("ix_vectors_id"), "vectors", ["id"], unique=False)
    op.create_table(
        "annotations",
        sa.Column("id", sa.Integer(), nullable=False, autoincrement=True),
        sa.Column("key", sa.String(), nullable=False),
        sa.Column("value", sa.String(), nullable=True),
        sa.Column("vector", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["vector"],
            ["vectors.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_annotations_id"), "annotations", ["id"], unique=False)
    op.create_table(
        "features",
        sa.Column("id", sa.Integer(), nullable=False, autoincrement=True),
        sa.Column("type", sa.String(), nullable=True),
        sa.Column("start_pos", sa.Integer(), nullable=False),
        sa.Column("end_pos", sa.Integer(), nullable=False),
        sa.Column("strand", sa.Integer(), nullable=True),
        sa.Column("vector", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["vector"],
            ["vectors.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_features_id"), "features", ["id"], unique=False)
    op.create_table(
        "user_vector_mapping",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("user", sa.Integer(), nullable=True),
        sa.Column("vector", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["user"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(
            ["vector"],
            ["vectors.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "vector_hierarchy",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("parent", sa.Integer(), nullable=False),
        sa.Column("child", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["child"],
            ["vectors.id"],
        ),
        sa.ForeignKeyConstraint(
            ["parent"],
            ["vectors.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "vector_references",
        sa.Column("id", sa.Integer(), nullable=False, autoincrement=True),
        sa.Column("authors", sa.String(), nullable=True),
        sa.Column("title", sa.String(), nullable=True),
        sa.Column("vector", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["vector"],
            ["vectors.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_vector_references_id"), "vector_references", ["id"], unique=False
    )
    op.create_table(
        "qualifiers",
        sa.Column("id", sa.Integer(), nullable=False, autoincrement=True),
        sa.Column("key", sa.String(), nullable=False),
        sa.Column("value", sa.String(), nullable=True),
        sa.Column("feature", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["feature"],
            ["features.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_qualifiers_id"), "qualifiers", ["id"], unique=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_qualifiers_id"), table_name="qualifiers")
    op.drop_table("qualifiers")
    op.drop_index(op.f("ix_vector_references_id"), table_name="vector_references")
    op.drop_table("vector_references")
    op.drop_table("vector_hierarchy")
    op.drop_table("user_vector_mapping")
    op.drop_index(op.f("ix_features_id"), table_name="features")
    op.drop_table("features")
    op.drop_index(op.f("ix_annotations_id"), table_name="annotations")
    op.drop_table("annotations")
    op.drop_index(op.f("ix_vectors_id"), table_name="vectors")
    op.drop_table("vectors")
    op.drop_index(op.f("ix_users_sub"), table_name="users")
    op.drop_index(op.f("ix_users_iss"), table_name="users")
    op.drop_index(op.f("ix_users_id"), table_name="users")
    op.drop_table("users")
    op.drop_index(op.f("ix_providers_id"), table_name="providers")
    op.drop_table("providers")
    # ### end Alembic commands ###
